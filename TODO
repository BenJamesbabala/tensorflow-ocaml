- Ops Generation.
  - Switch to ocaml-protoc ?

- Proper wrapper around wrapper.ml.
  - More functional and type-safe api.
  - Store in [Session.t] the current nodes and automatically extend the graph on [Session.run].
    - Remove [Session.extend_graph].

- Safer/better impls for ops.
  - Variable initialization.
    - Force variables to have an initialization in [Ops_m.var{f,d}], init could be zero/const/..., maybe a tensor ?
    - Store the initialization details somewhere.
    - When calling [Session.run], we go through the graph to upload new nodes, also get new var nodes
      and call [Session.run] a first time to perform initialization.

- Gradient Computation and Descent.
  - Register the gradients of more functions.

- Examples and tests.
  - Example with hidden layer.
  - Tutorials (MNIST ?)
  - Add tests.
    - Arithmetic operations.
    - Gradient, graph with sharing/multiple contributions...
